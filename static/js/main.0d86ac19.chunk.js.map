{"version":3,"sources":["components/ShowWeather.js","components/WeatherForecast.js","App.js","reportWebVitals.js","index.js"],"names":["columns","heading","property","Table","data","forEach","k","keys","Object","console","log","map","col","val","ShowWeather","props","forecast","className","description","temperature","wind","WeatherForecast","useState","location","form","setForm","weather","setWeather","e","a","preventDefault","alert","fetch","then","response","json","type","name","placeholder","onChange","target","value","handleRequest","onClick","weatherFetch","undefined","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAKIA,EAAU,CACV,CACEC,QAAS,MACTC,SAAU,OAEZ,CACED,QAAS,cACTC,SAAU,eAEZ,CACED,QAAS,OACTC,SAAU,SAKRC,EAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAMf,OALAA,EAAKC,SAAQ,SAAAC,GACT,IAAMC,EAAOC,OAAOD,KAAKD,GACzBG,QAAQC,IAAI,OAAQH,MAItB,kCACQ,6BAAKP,EAAQW,KAAI,SAAAC,GAAG,OAAI,6BAAKA,EAAIX,eAChCG,EAAKO,KAAI,SAAAE,GAAG,OACT,6BACKb,EAAQW,KAAI,SAAAC,GAAG,OAAI,6BAAKC,EAAID,EAAIV,wBAkCxCY,MAtBf,SAAqBC,GAEjB,IAAOX,EAAQW,EAARX,KAGP,OAFAK,QAAQC,IAAIN,EAAKY,UAGb,sBAAKC,UAAU,iBAAf,UACI,qBAAKA,UAAU,QAAf,SAAwB,kDACxB,sBAAKA,UAAU,cAAf,0BAA2Cb,EAAKc,eAChD,sBAAKD,UAAU,cAAf,0BAA2Cb,EAAKe,eAChD,sBAAKF,UAAU,cAAf,yBAA0Cb,EAAKgB,QAC/C,uBACA,qBAAKH,UAAU,QAAf,4CACA,8BACI,cAAC,EAAD,CAAOb,KAAMA,EAAKY,iBCbnBK,MAvCf,WAEI,MAAwBC,mBAAS,CAACC,SAAU,KAA5C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,mBAAS,IAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAHuB,4CASvB,WAA6BC,GAA7B,eAAAC,EAAA,yDACID,EAAEE,iBACoB,KAAlBN,EAAKD,SAFb,gBAGQQ,MAAM,0CAHd,sCAK2BC,MAAM,2CAAD,OAA4CR,EAAKD,WACpDU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7B,GAAI,OAAIA,KAP1C,OAKcA,EALd,OAQQuB,EAAW,CAACvB,KAAOA,IAR3B,4CATuB,sBAsBvB,OAAO,sBAAKa,UAAU,UAAf,UACK,mBAAGA,UAAU,QAAb,oCACI,iCACI,uBAAOmB,KAAK,OACJC,KAAK,WACLC,YAAY,qBACZC,SACI,SAAAX,GAAC,OAxBX,SAACA,GACnBH,EAAQ,2BAAID,GAAL,IAAWD,SAAUK,EAAEY,OAAOC,SAuBJC,CAAcd,MAE/B,wBAAQX,UAAU,aAAa0B,QAAS,SAAAf,GAAC,OA/BtC,2CA+B0CgB,CAAahB,IAA1D,sCAGiBiB,IAAjBnB,EAAQtB,KAAqB,cAAC,EAAD,CAAaA,KAAMsB,EAAQtB,OAAW,S,MC7B5E0C,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0d86ac19.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ShowWeather.css\";\r\n\r\n\r\n\r\nlet columns = [\r\n    {\r\n      heading: 'Day',\r\n      property: 'day'\r\n    },\r\n    {\r\n      heading: 'Temperature',\r\n      property: 'temperature'\r\n    },\r\n    {\r\n      heading: 'Wind',\r\n      property: 'wind'\r\n    }\r\n  ]\r\n  \r\n  \r\n  const Table = ({ data }) => {\r\n    data.forEach(k => {\r\n        const keys = Object.keys(k);        \r\n        console.log(\"keys\", keys);\r\n    });\r\n    \r\n    return (\r\n      <table>\r\n              <tr>{columns.map(col => <th>{col.heading}</th>)}</tr>\r\n              {data.map(val =>\r\n                  <tr>\r\n                      {columns.map(col => <td>{val[col.property]}</td>)}\r\n                  </tr>\r\n              )}\r\n      </table>\r\n  )\r\n}\r\n\r\n \r\n\r\n\r\n\r\n\r\nfunction ShowWeather(props) {         \r\n\r\n    const {data} = props;  \r\n    console.log(data.forecast);\r\n    \r\n    return (\r\n        <div className=\"todays-weather\">\r\n            <div className=\"title\" ><h3>Todays Weather</h3></div>\r\n            <div className=\"todays-data\">Description: {data.description}</div>\r\n            <div className=\"todays-data\">Temperature: {data.temperature}</div>\r\n            <div className=\"todays-data\">Wind speed: {data.wind}</div>\r\n            <br/>\r\n            <div className=\"title\" >Forecast for upcomming weather</div>\r\n            <div>\r\n                <Table data={data.forecast} />                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ShowWeather","import React from \"react\";\r\nimport {useState} from \"react\";\r\nimport \"./WeatherForecast.css\";\r\nimport ShowWeather from \"./ShowWeather\";\r\n\r\n\r\nfunction WeatherForecast() {\r\n\r\n    const [form, setForm] = useState({location: \"\"})\r\n    const [weather, setWeather] = useState([]);\r\n\r\n    const handleRequest = (e) => {\r\n        setForm({...form, location: e.target.value})\r\n    }\r\n\r\n    async function weatherFetch (e) {\r\n        e.preventDefault();\r\n        if (form.location === \"\") {\r\n            alert(\"Provide valid location, e.g. city name\")\r\n        } else {\r\n            const data = await fetch(`https://goweather.herokuapp.com/weather/${form.location}`)\r\n                                .then(response => response.json())\r\n                                .then(data => data);\r\n            setWeather({data : data});\r\n        }\r\n    }\r\n\r\n\r\n    return <div className=\"weather\" >\r\n                <p className=\"title\" > Weather Forecast App </p> \r\n                    <form>\r\n                        <input type=\"text\"\r\n                                name=\"location\"\r\n                                placeholder=\"Enter the location\"\r\n                                onChange={\r\n                                    e => handleRequest(e)\r\n                                }></input> \r\n                        <button className=\"getWeather\" onClick={e => weatherFetch(e)}>Get the Forecast</button> \r\n                    </form>\r\n                    {\r\n                        weather.data !== undefined ? <ShowWeather data={weather.data} /> : null\r\n                    }\r\n            </div>\r\n    }\r\n\r\nexport default WeatherForecast;","import WeatherForecast from './components/WeatherForecast';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherForecast />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}